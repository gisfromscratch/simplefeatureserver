//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Services.Testing.Web {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SightingDevice", Namespace="http://schemas.datacontract.org/2004/07/Sighting.Services.Data")]
    [System.SerializableAttribute()]
    public partial class SightingDevice : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Sighting", Namespace="http://schemas.datacontract.org/2004/07/Sighting.Services.Data")]
    [System.SerializableAttribute()]
    public partial class Sighting : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GeometryAsWellKnownTextField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date {
            get {
                return this.DateField;
            }
            set {
                if ((this.DateField.Equals(value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GeometryAsWellKnownText {
            get {
                return this.GeometryAsWellKnownTextField;
            }
            set {
                if ((object.ReferenceEquals(this.GeometryAsWellKnownTextField, value) != true)) {
                    this.GeometryAsWellKnownTextField = value;
                    this.RaisePropertyChanged("GeometryAsWellKnownText");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Web.ISightingService")]
    public interface ISightingService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISightingService/CreateDevice", ReplyAction="http://tempuri.org/ISightingService/CreateDeviceResponse")]
        Services.Testing.Web.SightingDevice CreateDevice(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISightingService/CreateDevice", ReplyAction="http://tempuri.org/ISightingService/CreateDeviceResponse")]
        System.Threading.Tasks.Task<Services.Testing.Web.SightingDevice> CreateDeviceAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISightingService/CreateSighting", ReplyAction="http://tempuri.org/ISightingService/CreateSightingResponse")]
        Services.Testing.Web.Sighting CreateSighting(double latitude, double longitude, System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISightingService/CreateSighting", ReplyAction="http://tempuri.org/ISightingService/CreateSightingResponse")]
        System.Threading.Tasks.Task<Services.Testing.Web.Sighting> CreateSightingAsync(double latitude, double longitude, System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISightingService/QueryAllDevices", ReplyAction="http://tempuri.org/ISightingService/QueryAllDevicesResponse")]
        Services.Testing.Web.SightingDevice[] QueryAllDevices();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISightingService/QueryAllDevices", ReplyAction="http://tempuri.org/ISightingService/QueryAllDevicesResponse")]
        System.Threading.Tasks.Task<Services.Testing.Web.SightingDevice[]> QueryAllDevicesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISightingService/QueryAllSightings", ReplyAction="http://tempuri.org/ISightingService/QueryAllSightingsResponse")]
        string[] QueryAllSightings();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISightingService/QueryAllSightings", ReplyAction="http://tempuri.org/ISightingService/QueryAllSightingsResponse")]
        System.Threading.Tasks.Task<string[]> QueryAllSightingsAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISightingServiceChannel : Services.Testing.Web.ISightingService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SightingServiceClient : System.ServiceModel.ClientBase<Services.Testing.Web.ISightingService>, Services.Testing.Web.ISightingService {
        
        public SightingServiceClient() {
        }
        
        public SightingServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SightingServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SightingServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SightingServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Services.Testing.Web.SightingDevice CreateDevice(string name) {
            return base.Channel.CreateDevice(name);
        }
        
        public System.Threading.Tasks.Task<Services.Testing.Web.SightingDevice> CreateDeviceAsync(string name) {
            return base.Channel.CreateDeviceAsync(name);
        }
        
        public Services.Testing.Web.Sighting CreateSighting(double latitude, double longitude, System.DateTime date) {
            return base.Channel.CreateSighting(latitude, longitude, date);
        }
        
        public System.Threading.Tasks.Task<Services.Testing.Web.Sighting> CreateSightingAsync(double latitude, double longitude, System.DateTime date) {
            return base.Channel.CreateSightingAsync(latitude, longitude, date);
        }
        
        public Services.Testing.Web.SightingDevice[] QueryAllDevices() {
            return base.Channel.QueryAllDevices();
        }
        
        public System.Threading.Tasks.Task<Services.Testing.Web.SightingDevice[]> QueryAllDevicesAsync() {
            return base.Channel.QueryAllDevicesAsync();
        }
        
        public string[] QueryAllSightings() {
            return base.Channel.QueryAllSightings();
        }
        
        public System.Threading.Tasks.Task<string[]> QueryAllSightingsAsync() {
            return base.Channel.QueryAllSightingsAsync();
        }
    }
}
